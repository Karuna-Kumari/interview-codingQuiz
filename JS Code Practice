Question 1. Write a function accepting the above array as an argument,
and return the below object as output.as
const arr = [
  {"id":7,"name":"Kuwait","parentId":2},
  {"id":4,"name":"Iraq","parentId":2},
  {"id":10,"name":"Qatar","parentId":2},
  {"id":2,"name":"Middle East","parentId":1},
  {"id":3,"name":"Bahrain","parentId":2},
  {"id":6,"name":"Jordan","parentId":2},
  {"id":8,"name":"Lebanon","parentId":2},
  {"id":1,"name":"Africa/Middle East","parentId":null},
  {"id":5,"name":"Israel","parentId":2},
  {"id":9,"name":"Oman","parentId":2}
];

const output = [
  {
    "id":1,
   "text":"Africa/Middle East",
   "children":[
      {
       "id":2,
       "text":"Middle East",
       "children":[
         {
           "id":7,
           "name":"Kuwait",
           "children":[]
         },
         {
           "id":4,
           "name":"Iraq",
           "children":[]
         },
         {
           "id":10,
           "name":"Qatar",
           "children":[]
         },
         {
           "id":3,
           "name":"Bahrain",
           "children":[]
         },
         {
           "id":6,
           "name":"Jordan",
           "children":[]
         },
          {
           "id":8,
           "name":"Lebanon",
           "children":[]
         },
          {
           "id":5,
           "name":"Israel",
           "children":[]
         },
          {
           "id":9,
           "name":"Oman",
           "children":[]
         }
       ]
     }
    ]
  }
];

Ans: const arr = [
   {"id":7,"name":"Kuwait","parentId":2},
    {"id":4,"name":"Iraq","parentId":2},
    {"id":10,"name":"Qatar","parentId":2},
   {"id":2,"name":"Middle East","parentId":1},
    {"id":3,"name":"Bahrain","parentId":2},
    {"id":6,"name":"Jordan","parentId":2},
   {"id":8,"name":"Lebanon","parentId":2},
    {"id":1,"name":"Africa/Middle East","parentId":null},    
    {"id":5,"name":"Israel","parentId":2},
    {"id":9,"name":"Oman","parentId":2} ];
const treeStructure = (data, root = null) => {
   const res = [];
   const map = {};
   data.forEach((elem) => {
      elem.children = map[elem.id] && map[elem.id].children || [];
      map[elem.id] = elem; if (elem.parentId === root) {
          res.push(elem);
      }
      else {
         map[elem.parentId] = map[elem.parentId] || {};
         map[elem.parentId].children = map[elem.parentId].children || [];     
         map[elem.parentId].children.push(elem);
      };
   });
   return res;
};
console.log(JSON.stringify(treeStructure(arr), undefined, 4));

Question 2. Given two sorted arrays, the arrays may have some common elements. Find the sum of the maximum sum path to reach from the
          beginning of any array to the end of any of the two arrays. We can switch from one array to another array only at common elements. <script> 
Input: ar1[] = {2, 3, 7, 10, 12}, ar2[] = {1, 5, 7, 8}
Output: 35
Explanation: 35 is sum of 1 + 5 + 7 + 10 + 12.

Ans: 
// Javascript program to find maximum sum path 

// Utility function to find maximum of two integers 
function max(x, y) 
{ 
	return (x > y) ? x : y; 
} 

// This function returns the sum of elements 
// on maximum path from beginning to end 
function maxPathSum(ar1, ar2, m, n) 
{ 
	
	// Initialize indexes for ar1[] and ar2[] 
	let i = 0, j = 0; 

	// Initialize result and current sum 
	// through ar1[] and ar2[]. 
	let result = 0, sum1 = 0, sum2 = 0; 

	// Below3 loops are similar to 
	// merge in merge sort 
	while (i < m && j < n) 
	{ 
		
		// Add elements of ar1[] to sum1 
		if (ar1[i] < ar2[j]) 
			sum1 += ar1[i++]; 

		// Add elements of ar2[] to sum2 
		else if (ar1[i] > ar2[j]) 
			sum2 += ar2[j++]; 
			
		// We reached a common point 
		else
		{ 
			// Take the maximum of two sums and add to 
			// result 
			//Also add the common element of array, once 
			result += Math.max(sum1, sum2) + ar1[i]; 

			// Update sum1 and sum2 for elements after this 
			// intersection point 
			sum1 = 0; 
			sum2 = 0; 
			
			//update i and j to move to next element of each array 
			i++; 
			j++; 
			

		} 
	} 

	// Add remaining elements of ar1[] 
	while (i < m) 
		sum1 += ar1[i++]; 

	// Add remaining elements of ar2[] 
	while (j < n) 
		sum2 += ar2[j++]; 

	// Add maximum of two sums of 
	// remaining elements 
	result += Math.max(sum1, sum2); 

	return result; 
} 

// Driver code 
let ar1 = [ 2, 3, 7, 10, 12 ]; 
let ar2 = [ 1, 5, 7, 8]; 
let m = ar1.length; 
let n = ar2.length; 

// Function call 
document.write("Maximum sum path is " + 
maxPathSum(ar1, ar2, m, n)); 

Output is 35

</script>

